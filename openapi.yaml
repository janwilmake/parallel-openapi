# yaml-language-server: $schema=https://spec.openapis.org/oas/3.0/schema/2024-10-18
openapi: 3.1.0
info:
  title: Parallel API
  description: Parallel API
  contact:
    name: Parallel Support
    url: https://parallel.ai
    email: support@parallel.ai
  version: 0.1.2
paths:
  /alpha/search:
    post:
      tags:
        - Search API
      summary: Execute web search with AI-native results
      description: Searches the web using natural language objectives and returns ranked URLs with extended webpage excerpts. Built on Parallel's custom web crawler and index, this API takes flexible inputs (search objective and/or search queries) and returns LLM-ready ranked URLs with extended webpage excerpts. The Search API is optimized for AI agents and RAG systems requiring high-quality, relevant web content.
      operationId: web_search_alpha_search_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResponse"
              example:
                search_id: search_fcb2b4f3-c75e-4186-87bc-caa1a8381331
                results:
                  - url: https://www.example.com
                    title: Sample webpage title
                    excerpts:
                      - Sample excerpt 1
                      - Sample excerpt 2
        "422":
          description: Request validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                type: error
                error:
                  ref_id: search_fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request validation error
  /v1/tasks/runs:
    post:
      tags:
        - Task API v1
      summary: Create a new task run for structured web research
      description: Initiates a task run that transforms natural language queries into precise, schema-compliant web outputs. The task run is created immediately in 'queued' status and begins processing asynchronously. You can specify input data (string or JSON), select a processor (lite, base, core, pro, ultra), and define structured output schemas. Beta features like Source Policy, MCP servers, and webhooks can be enabled by setting the 'parallel-beta' header with appropriate values.
      operationId: tasks_runs_post_v1_tasks_runs_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRunInput-Input"
      responses:
        "202":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskRun"
              example:
                run_id: trun_9907962f83aa4d9d98fd7f4bf745d654
                status: queued
                is_active: true
                processor: core
                metadata:
                  my_key: my_value
                created_at: "2025-04-23T20:21:48.037943Z"
                modified_at: "2025-04-23T20:21:48.037943Z"
        "401":
          description: "Unauthorized: invalid or missing credentials"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unauthorized: invalid or missing credentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "402":
          description: "Payment required: insufficient credit in account"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Payment required: insufficient credit in account"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "403":
          description: "Forbidden: invalid processor in request"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Forbidden: invalid processor in request"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: "Unprocessable content: request validation error"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unprocessable content: request validation error"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: "Too many requests: quota temporarily exceeded"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Too many requests: quota temporarily exceeded"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: Python
          source: |-
            from parallel import Parallel

            client = Parallel(
                api_key="My API Key",
            )
            task_run = client.task_run.create(
                input="What was the GDP of France in 2023?",
                processor="base",
            )
            print(task_run.run_id)
  /v1/tasks/runs/{run_id}:
    get:
      tags:
        - Task API v1
      summary: Retrieve current status of a task run
      description: Retrieves the current status and metadata for a specific task run by its run_id. This endpoint returns the task run object with current status (queued, running, completed, failed, etc.), processor information, timestamps, and any warnings or errors. The actual task results are available through the separate `/result` endpoint once the task is completed.
      operationId: tasks_runs_get_v1_tasks_runs__run_id__get
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskRun"
              example:
                run_id: trun_9907962f83aa4d9d98fd7f4bf745d654
                status: running
                is_active: true
                processor: core
                metadata:
                  my_key: my_value
                created_at: "2025-04-23T20:21:48.037943Z"
                modified_at: "2025-04-23T20:21:48.037943Z"
        "401":
          description: "Unauthorized: invalid or missing credentials"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unauthorized: invalid or missing credentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Run id not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Run id not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Request validation error
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request validation error
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: Python
          source: |-
            from parallel import Parallel

            client = Parallel(
                api_key="My API Key",
            )
            task_run = client.task_run.retrieve(
                "run_id",
            )
            print(task_run.run_id)
  /v1/tasks/runs/{run_id}/input:
    get:
      tags:
        - Task API v1
      summary: Retrieve the original input data for a task run
      description: Retrieves the complete input data that was submitted when creating the specified task run. This includes the task specification (input/output schemas), the actual input data (text or JSON), processor selection, and any metadata that was provided. This endpoint is useful for debugging, auditing, or reconstructing the context of a completed task run.
      operationId: tasks_runs_input_get_v1_tasks_runs__run_id__input_get
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskRunInput-Output"
              example:
                task_spec:
                  output_schema:
                    json_schema:
                      type: object
                      properties:
                        gdp:
                          type: string
                          description: GDP in USD for the year, formatted like '$3.1 trillion (2023)'
                      required:
                        - gdp
                      additionalProperties: false
                    type: json
                  input_schema:
                    json_schema:
                      type: object
                      properties:
                        country:
                          type: string
                        year:
                          type: integer
                      required:
                        - country
                        - year
                      additionalProperties: false
                    type: json
                input:
                  country: France
                  year: 2023
                processor: core
                metadata:
                  my_key: my_value
        "401":
          description: "Unauthorized: invalid or missing credentials"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unauthorized: invalid or missing credentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Run id not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Run id not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Request validation error
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request validation error
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /v1/tasks/runs/{run_id}/result:
    get:
      tags:
        - Task API v1
      summary: Retrieve task run results with citations and reasoning
      description: Retrieves the complete results of a task run, blocking until the task is completed if it's still in progress. The response includes both the structured output that conforms to your specified schema and the comprehensive "basis" - citations, reasoning, excerpts, and confidence levels that support each output field. This endpoint automatically handles polling and will wait up to the specified timeout (default 600 seconds) for task completion.
      operationId: tasks_runs_result_get_v1_tasks_runs__run_id__result_get
      parameters:
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
        - name: timeout
          in: query
          required: false
          schema:
            type: integer
            default: 600
            title: Timeout
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskRunResult"
              example:
                run:
                  run_id: trun_9907962f83aa4d9d98fd7f4bf745d654
                  status: completed
                  is_active: false
                  processor: core
                  metadata:
                    my_key: my_value
                  created_at: "2025-04-23T20:21:48.037943Z"
                  modified_at: "2025-04-23T20:21:48.037943Z"
                output:
                  basis: []
                  type: json
                  content:
                    gdp: $3.1 trillion (2023)
        "401":
          description: "Unauthorized: invalid or missing credentials"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unauthorized: invalid or missing credentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Run failed or run id not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Run failed or run id not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "408":
          description: Request timed out; run still active
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request timed out; run still active
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Request validation error
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request validation error
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      x-codeSamples:
        - lang: Python
          source: |-
            from parallel import Parallel

            client = Parallel(
                api_key="My API Key",
            )
            task_run_result = client.task_run.result(
                run_id="run_id",
            )
            print(task_run_result.output)
  /v1beta/tasks/groups:
    post:
      tags:
        - Task API (Beta)
      summary: Create a task group for batch processing
      description: Creates a new TaskGroup container to organize and track multiple task runs collectively. Task Groups enable efficient batch processing of hundreds or thousands of tasks with unified monitoring, intelligent failure handling, and real-time results streaming. This is ideal for large-scale operations like bulk CRM enrichment, due diligence workflows, or competitive intelligence gathering where you need to process many similar tasks and monitor their progress as a group.
      operationId: tasks_taskgroups_post_v1beta_tasks_groups_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskGroupRequest"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskGroupResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /v1beta/tasks/groups/{taskgroup_id}:
    get:
      tags:
        - Task API (Beta)
      summary: Get aggregated status across all runs in a task group
      description: Retrieves the current aggregated status and progress information for all task runs within the specified TaskGroup. This includes the total number of task runs, counts of runs by status (queued, running, completed, failed, etc.), whether the group is still active, and a human-readable status message. This endpoint provides a high-level overview of your batch processing progress without needing to check individual task runs.
      operationId: tasks_taskgroups_get_v1beta_tasks_groups__taskgroup_id__get
      parameters:
        - name: taskgroup_id
          in: path
          required: true
          schema:
            type: string
            title: Taskgroup Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskGroupResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /v1beta/tasks/groups/{taskgroup_id}/runs:
    post:
      tags:
        - Task API (Beta)
      summary: Add multiple task runs to an existing task group
      description: Adds multiple new task runs to an existing TaskGroup for batch processing. You can specify a default task specification that applies to all runs, then provide individual inputs and processor selections for each task. This allows you to efficiently queue hundreds or thousands of similar tasks while maintaining the ability to customize inputs and processors per task. The runs are added immediately and begin processing asynchronously.
      operationId: tasks_taskgroups_runs_post_v1beta_tasks_groups__taskgroup_id__runs_post
      parameters:
        - name: taskgroup_id
          in: path
          required: true
          schema:
            type: string
            title: Taskgroup Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskGroupRunRequest"
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskGroupRunResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
    get:
      tags:
        - Task API (Beta)
      summary: Stream task runs and their results from a task group
      description: Streams task runs from a TaskGroup in real-time, optionally including their inputs and outputs as they become available. Task runs are returned in the order they were added to the group, with completed tasks including their full results and incomplete tasks showing current status. This server-sent events endpoint enables real-time monitoring and result collection for batch processing workflows. You can filter by status and control whether to include input data and output results.
      operationId: tasks_taskgroups_runs_get_v1beta_tasks_groups__taskgroup_id__runs_get
      parameters:
        - name: taskgroup_id
          in: path
          required: true
          schema:
            type: string
            title: Taskgroup Id
        - name: last_event_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Last Event Id
        - name: status
          in: query
          required: false
          schema:
            anyOf:
              - enum:
                  - queued
                  - action_required
                  - running
                  - completed
                  - failed
                  - cancelling
                  - cancelled
                type: string
              - type: "null"
            title: Status
        - name: include_input
          in: query
          required: false
          schema:
            type: boolean
            default: false
            title: Include Input
        - name: include_output
          in: query
          required: false
          schema:
            type: boolean
            default: false
            title: Include Output
      responses:
        "200":
          description: Successful Response
          content:
            text/event-stream:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TaskRunEvent"
                  - $ref: "#/components/schemas/ErrorEvent"
                discriminator:
                  propertyName: type
                  mapping:
                    task_run.state: "#/components/schemas/TaskRunEvent"
                    error: "#/components/schemas/ErrorEvent"
                title: Response 200 Tasks Taskgroups Runs Get V1Beta Tasks Groups  Taskgroup Id  Runs Get
              example:
                type: task_run.state
                event_id: "123"
                run:
                  run_id: trun_9907962f83aa4d9d98fd7f4bf745d654
                  status: completed
                  is_active: false
                  processor: core
                  metadata:
                    my_key: my_value
                  created_at: "2025-04-23T20:21:48.037943Z"
                  modified_at: "2025-04-23T20:21:48.037943Z"
                input:
                  input:
                    country: France
                    year: 2023
                  processor: core
                  metadata:
                    my_key: my_value
        "404":
          description: TaskGroup not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: TaskGroup not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /v1beta/tasks/groups/{taskgroup_id}/events:
    get:
      tags:
        - Task API (Beta)
      summary: Stream real-time events from a task group
      description: Streams real-time events from a TaskGroup including status updates and run completions via server-sent events. This endpoint provides live updates about group-level status changes and individual task run completions, enabling real-time monitoring of batch processing operations. The connection remains open for up to 10 minutes as long as at least one run in the TaskGroup is active, and supports resumable streaming using event IDs for reliable event delivery.
      operationId: tasks_sessions_events_get_v1beta_tasks_groups__taskgroup_id__events_get
      parameters:
        - name: taskgroup_id
          in: path
          required: true
          schema:
            type: string
            title: Taskgroup Id
        - name: last_event_id
          in: query
          required: false
          schema:
            anyOf:
              - type: string
              - type: "null"
            title: Last Event Id
        - name: timeout
          in: query
          required: false
          schema:
            anyOf:
              - type: number
              - type: "null"
            title: Timeout
      responses:
        "200":
          description: Successful Response
          content:
            text/event-stream:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/TaskGroupStatusEvent"
                  - $ref: "#/components/schemas/TaskRunEvent"
                  - $ref: "#/components/schemas/ErrorEvent"
                discriminator:
                  propertyName: type
                  mapping:
                    task_group_status: "#/components/schemas/TaskGroupStatusEvent"
                    task_run.state: "#/components/schemas/TaskRunEvent"
                    error: "#/components/schemas/ErrorEvent"
                title: Response 200 Tasks Sessions Events Get V1Beta Tasks Groups  Taskgroup Id  Events Get
              example:
                type: task_group_status
                event_id: "123"
                status:
                  num_task_runs: 1
                  task_run_status_counts:
                    completed: 1
                  is_active: false
                  status_message: ""
                  modified_at: "2025-04-23T20:21:48.037943Z"
        "404":
          description: TaskGroup not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: TaskGroup not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HTTPValidationError"
  /v1beta/tasks/groups/{taskgroup_id}/runs/{run_id}:
    get:
      tags:
        - Task API (Beta)
      summary: Retrieve status of a specific run within a task group
      description: Retrieves the current status and metadata for a specific task run within a TaskGroup by its run_id. This endpoint provides the same information as the standard task run status endpoint but is scoped within the context of a task group. The actual task results are available through the separate result endpoints once the task is completed. This is useful for checking the status of individual tasks within a batch processing operation.
      operationId: tasks_taskgroups_runs_id_get_v1beta_tasks_groups__taskgroup_id__runs__run_id__get
      parameters:
        - name: taskgroup_id
          in: path
          required: true
          schema:
            type: string
            title: Taskgroup Id
        - name: run_id
          in: path
          required: true
          schema:
            type: string
            title: Run Id
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskRun"
              example:
                run_id: trun_9907962f83aa4d9d98fd7f4bf745d654
                status: running
                is_active: true
                processor: core
                metadata:
                  my_key: my_value
                created_at: "2025-04-23T20:21:48.037943Z"
                modified_at: "2025-04-23T20:21:48.037943Z"
        "401":
          description: "Unauthorized: invalid or missing credentials"
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: "Unauthorized: invalid or missing credentials"
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: Run id not found
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Run id not found
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "422":
          description: Request validation error
          content:
            application/json:
              example:
                type: error
                error:
                  ref_id: fcb2b4f3-c75e-4186-87bc-caa1a8381331
                  message: Request validation error
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    AutoSchema:
      properties:
        type:
          type: string
          enum:
            - auto
          const: auto
          title: Type
          description: The type of schema being defined. Always `auto`.
          default: auto
      type: object
      title: AutoSchema
      description: Auto schema for a task input or output.
    Citation:
      properties:
        title:
          anyOf:
            - type: string
            - type: "null"
          title: Title
          description: Title of the citation.
        url:
          type: string
          title: Url
          description: URL of the citation.
        excerpts:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Excerpts
          description: Excerpts from the citation supporting the output. Only certain processors provide excerpts.
      type: object
      required:
        - url
      title: Citation
      description: A citation for a task output.
    CreateTaskGroupRequest:
      properties:
        metadata:
          anyOf:
            - additionalProperties:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
                  - type: boolean
              type: object
            - type: "null"
          title: Metadata
          description: User-provided metadata stored with the task group.
      type: object
      title: CreateTaskGroupRequest
      description: Request to create a task group.
    Error:
      properties:
        ref_id:
          type: string
          title: Ref Id
          description: Reference ID for the error.
        message:
          type: string
          title: Message
          description: Human-readable message.
        detail:
          anyOf:
            - type: object
            - type: "null"
          title: Detail
          description: Optional detail supporting the error.
      type: object
      required:
        - ref_id
        - message
      title: Error
      description: An error message.
    ErrorEvent:
      properties:
        type:
          type: string
          enum:
            - error
          const: error
          title: Type
          description: Event type; always 'error'.
          default: error
        error:
          allOf:
            - $ref: "#/components/schemas/Error"
          description: Error.
      type: object
      required:
        - error
      title: ErrorEvent
      description: Event indicating an error.
    ErrorResponse:
      properties:
        type:
          type: string
          enum:
            - error
          const: error
          title: Type
          description: Always 'error'.
          default: error
        error:
          allOf:
            - $ref: "#/components/schemas/Error"
          description: Error.
      type: object
      required:
        - error
      title: ErrorResponse
      description: Response object used for non-200 status codes.
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: "#/components/schemas/ValidationError"
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    JsonSchema:
      properties:
        json_schema:
          type: object
          title: Json Schema
          description: A JSON Schema object. Only a subset of JSON Schema is supported.
          examples:
            - additionalProperties: false
              properties:
                gdp:
                  description: GDP in USD for the year, formatted like '$3.1 trillion (2023)'
                  type: string
              required:
                - gdp
              type: object
        type:
          type: string
          enum:
            - json
          const: json
          title: Type
          description: The type of schema being defined. Always `json`.
          default: json
      type: object
      required:
        - json_schema
      title: JsonSchema
      description: JSON schema for a task input or output.
    McpToolCall:
      properties:
        tool_call_id:
          type: string
          title: Tool Call Id
          description: Identifier for the tool call.
        server_name:
          type: string
          title: Server Name
          description: Name of the MCP server.
        tool_name:
          type: string
          title: Tool Name
          description: Name of the tool being called.
        arguments:
          type: string
          title: Arguments
          description: Arguments used to call the MCP tool.
        content:
          anyOf:
            - type: string
            - type: "null"
          title: Content
          description: Output received from the tool call, if successful.
        error:
          anyOf:
            - type: string
            - type: "null"
          title: Error
          description: Error message if the tool call failed.
      type: object
      required:
        - tool_call_id
        - server_name
        - tool_name
        - arguments
      title: McpToolCall
      description: Result of an MCP tool call.
    SearchRequest:
      properties:
        objective:
          anyOf:
            - type: string
            - type: "null"
          title: Objective
          description: >-
            Natural-language description of what the web search is trying to find. May include guidance about
            preferred sources or freshness. At least one of objective or search_queries must be provided.
        search_queries:
          anyOf:
            - items:
                type: string
              type: array
            - type: "null"
          title: Search Queries
          description: >-
            Optional list of traditional keyword search queries to guide the search. May contain search
            operators. At least one of objective or search_queries must be provided.
        processor:
          type: string
          enum:
            - base
            - pro
          title: Processor
          description: Search processor.
          default: base
        max_results:
          anyOf:
            - type: integer
            - type: "null"
          title: Max Results
          description: >-
            Upper bound on the number of results to return. May be limited by the processor. Defaults to 10 if
            not provided.
          default: 10
        max_chars_per_result:
          anyOf:
            - type: integer
            - type: "null"
          title: Max Chars Per Result
          description: Upper bound on the number of characters to include in excerpts for each search result.
        source_policy:
          anyOf:
            - $ref: "#/components/schemas/SourcePolicy"
            - type: "null"
          description: Optional source policy governing preferred and disallowed domains in search results.
      type: object
      title: SearchRequest
      description: Base class for search queries.
    SearchResponse:
      properties:
        search_id:
          type: string
          title: Search Id
          description: "Search ID. Example: `search_cad0a6d2-dec0-46bd-95ae-900527d880e7`"
        results:
          items:
            $ref: "#/components/schemas/WebSearchResult"
          type: array
          title: Results
          description: A list of WebSearchResult objects, ordered by decreasing relevance.
      type: object
      required:
        - search_id
        - results
      title: SearchResponse
      description: Output for the Search API.
    SourcePolicy:
      properties:
        include_domains:
          items:
            type: string
          type: array
          title: Include Domains
          description: >-
            List of domains to restrict the results to. If specified, only sources from these domains will be
            included.
          examples:
            - wikipedia.org
            - usa.gov
        exclude_domains:
          items:
            type: string
          type: array
          title: Exclude Domains
          description: >-
            List of domains to exclude from results. If specified, sources from these domains will be
            excluded.
          examples:
            - reddit.com
            - x.com
      type: object
      title: SourcePolicy
      description: |-
        Source policy for web search results.

        This policy governs which sources are allowed/disallowed in results.
    TaskGroupResponse:
      properties:
        taskgroup_id:
          type: string
          title: Taskgroup Id
          description: ID of the group.
        metadata:
          anyOf:
            - additionalProperties:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
                  - type: boolean
              type: object
            - type: "null"
          title: Metadata
          description: User-provided metadata stored with the group.
        status:
          allOf:
            - $ref: "#/components/schemas/TaskGroupStatus"
          description: Status of the group.
        created_at:
          anyOf:
            - type: string
            - type: "null"
          title: Created At
          description: Timestamp of the creation of the group, as an RFC 3339 string.
          examples:
            - "2025-04-24T18:56:22.513132Z"
      type: object
      required:
        - taskgroup_id
        - status
        - created_at
      title: TaskGroupResponse
      description: Response object for a task group, including its status and metadata.
    TaskGroupRunRequest:
      properties:
        default_task_spec:
          anyOf:
            - $ref: "#/components/schemas/TaskSpec"
            - type: "null"
          description: >-
            Default task spec to use for the runs. If task_spec is specified in a run, it overrides this
            default.
        inputs:
          items:
            $ref: "#/components/schemas/TaskRunInput-Input"
          type: array
          title: Inputs
          description: List of task runs to execute.
      type: object
      required:
        - inputs
      title: TaskGroupRunRequest
      description: Request to initiate new task runs in a task group.
    TaskGroupRunResponse:
      properties:
        status:
          allOf:
            - $ref: "#/components/schemas/TaskGroupStatus"
          description: Status of the group.
        run_ids:
          items:
            type: string
          type: array
          title: Run Ids
          description: IDs of the newly created runs.
        run_cursor:
          anyOf:
            - type: string
            - type: "null"
          title: Run Cursor
          description: >-
            Cursor for these runs in the run stream at taskgroup/runs?last_event_id=<run_cursor>. Empty for
            the first runs in the group.
        event_cursor:
          anyOf:
            - type: string
            - type: "null"
          title: Event Cursor
          description: >-
            Cursor for these runs in the event stream at taskgroup/events?last_event_id=<event_cursor>. Empty
            for the first runs in the group.
      type: object
      required:
        - status
        - run_ids
        - run_cursor
        - event_cursor
      title: TaskGroupRunResponse
      description: Response from adding new task runs to a task group.
    TaskGroupStatus:
      properties:
        num_task_runs:
          type: integer
          title: Num Task Runs
          description: Number of task runs in the group.
        task_run_status_counts:
          additionalProperties:
            type: integer
          type: object
          title: Task Run Status Counts
          description: Number of task runs with each status.
        is_active:
          type: boolean
          title: Is Active
          description: >-
            True if at least one run in the group is currently active, i.e. status is one of {'cancelling',
            'queued', 'running'}.
        status_message:
          anyOf:
            - type: string
            - type: "null"
          title: Status Message
          description: Human-readable status message for the group.
        modified_at:
          anyOf:
            - type: string
            - type: "null"
          title: Modified At
          description: Timestamp of the last status update to the group, as an RFC 3339 string.
          examples:
            - "2025-04-24T18:56:22.513132Z"
      type: object
      required:
        - num_task_runs
        - task_run_status_counts
        - is_active
        - status_message
        - modified_at
      title: TaskGroupStatus
      description: Status of a task group.
    TaskGroupStatusEvent:
      properties:
        type:
          type: string
          enum:
            - task_group_status
          const: task_group_status
          title: Type
          description: Event type; always 'task_group_status'.
          default: task_group_status
        event_id:
          type: string
          title: Event Id
          description: Cursor to resume the event stream.
        status:
          allOf:
            - $ref: "#/components/schemas/TaskGroupStatus"
          description: Task group status object.
      type: object
      required:
        - event_id
        - status
      title: TaskGroupStatusEvent
      description: Event indicating an update to group status.
    TaskRun:
      properties:
        run_id:
          type: string
          title: Run Id
          description: ID of the task run.
          examples:
            - trun_e0083b6aac0544eb8686e8d2a76533d2
        status:
          type: string
          enum:
            - queued
            - action_required
            - running
            - completed
            - failed
            - cancelling
            - cancelled
          title: Status
          description: Status of the run.
          examples:
            - queued
            - action_required
            - running
            - completed
            - failed
            - cancelling
            - cancelled
        is_active:
          type: boolean
          title: Is Active
          description: Whether the run is currently active, i.e. status is one of {'cancelling', 'queued', 'running'}.
        warnings:
          anyOf:
            - items:
                $ref: "#/components/schemas/shapley__search__tasks__api_v1__Warning"
              type: array
            - type: "null"
          title: Warnings
          description: Warnings for the run, if any.
          examples:
            - []
        error:
          anyOf:
            - $ref: "#/components/schemas/Error"
            - type: "null"
          description: Error for the run, present only if status is 'failed'.
        processor:
          type: string
          title: Processor
          description: Processor used for the run.
          examples:
            - base
        metadata:
          anyOf:
            - additionalProperties:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
                  - type: boolean
              type: object
            - type: "null"
          title: Metadata
          description: User-provided metadata stored with the run.
          examples:
            - {}
        taskgroup_id:
          anyOf:
            - type: string
            - type: "null"
          title: Taskgroup Id
          description: ID of the taskgroup to which the run belongs.
        created_at:
          anyOf:
            - type: string
            - type: "null"
          title: Created At
          description: Timestamp of the creation of the task, as an RFC 3339 string.
          examples:
            - "2025-04-24T18:56:22.513132Z"
        modified_at:
          anyOf:
            - type: string
            - type: "null"
          title: Modified At
          description: Timestamp of the last modification to the task, as an RFC 3339 string.
          examples:
            - "2025-04-24T18:56:22.513132Z"
      type: object
      required:
        - run_id
        - status
        - is_active
        - processor
        - created_at
        - modified_at
      title: TaskRun
      description: Status of a task run.
    TaskRunEvent:
      properties:
        type:
          type: string
          enum:
            - task_run.state
          const: task_run.state
          title: Type
          description: Event type; always 'task_run.state'.
          default: task_run.state
        event_id:
          type: string
          title: Event Id
          description: Cursor to resume the event stream.
        run:
          allOf:
            - $ref: "#/components/schemas/TaskRun"
          description: Task run object.
        input:
          anyOf:
            - $ref: "#/components/schemas/TaskRunInput-Output"
            - type: "null"
          description: Input to the run; included only if requested.
        output:
          anyOf:
            - oneOf:
                - $ref: "#/components/schemas/TaskRunTextOutput"
                - $ref: "#/components/schemas/TaskRunJsonOutput"
              discriminator:
                propertyName: type
                mapping:
                  json: "#/components/schemas/TaskRunJsonOutput"
                  text: "#/components/schemas/TaskRunTextOutput"
            - type: "null"
          title: Output
          description: Output from the run; included only if requested and if status == `completed`.
      type: object
      required:
        - event_id
        - run
      title: TaskRunEvent
      description: |-
        Event when a task run transitions to a non-active status.

        May indicate completion, cancellation, or failure.
    TaskRunInput-Input:
      properties:
        task_spec:
          anyOf:
            - $ref: "#/components/schemas/TaskSpec"
            - type: "null"
          description: Task specification.
        input:
          anyOf:
            - type: string
            - type: object
          title: Input
          description: Input to the task, either text or a JSON object.
          examples:
            - What was the GDP of France in 2023?
            - country: France
              year: 2023
        processor:
          type: string
          title: Processor
          description: Processor to use for the task.
          examples:
            - base
        metadata:
          anyOf:
            - additionalProperties:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
                  - type: boolean
              type: object
            - type: "null"
          title: Metadata
          description: >-
            User-provided metadata stored with the run. Keys and values must be strings with a maximum length
            of 16 and 512 characters respectively.
      type: object
      required:
        - input
        - processor
      title: TaskRunInput
      description: Request to run a task.
    TaskRunInput-Output:
      properties:
        task_spec:
          anyOf:
            - $ref: "#/components/schemas/TaskSpec"
            - type: "null"
          description: Task specification.
        input:
          anyOf:
            - type: string
            - type: object
          title: Input
          description: Input to the task, either text or a JSON object.
          examples:
            - What was the GDP of France in 2023?
            - country: France
              year: 2023
        processor:
          type: string
          title: Processor
          description: Processor to use for the task.
          examples:
            - base
        metadata:
          anyOf:
            - additionalProperties:
                anyOf:
                  - type: string
                  - type: integer
                  - type: number
                  - type: boolean
              type: object
            - type: "null"
          title: Metadata
          description: >-
            User-provided metadata stored with the run. Keys and values must be strings with a maximum length
            of 16 and 512 characters respectively.
      type: object
      required:
        - input
        - processor
      title: TaskRunInput
      description: Request to run a task.
    TaskRunJsonOutput:
      properties:
        basis:
          items:
            $ref: "#/components/schemas/shapley__search__tasks__api_v1__FieldBasis"
          type: array
          title: Basis
          description: Basis for each top-level field in the JSON output.
        mcp_tool_calls:
          anyOf:
            - items:
                $ref: "#/components/schemas/McpToolCall"
              type: array
            - type: "null"
          title: Mcp Tool Calls
          description: MCP tool calls made by the task.
        type:
          type: string
          enum:
            - json
          const: json
          title: Type
          description: The type of output being returned, as determined by the output schema of the task spec.
          default: json
        content:
          type: object
          title: Content
          description: Output from the task as a native JSON object, as determined by the output schema of the task spec.
      type: object
      required:
        - basis
        - content
      title: TaskRunJsonOutput
      description: Output from a task that returns JSON.
    TaskRunResult:
      properties:
        run:
          allOf:
            - $ref: "#/components/schemas/TaskRun"
          description: Task run object with status 'completed'.
        output:
          oneOf:
            - $ref: "#/components/schemas/TaskRunTextOutput"
            - $ref: "#/components/schemas/TaskRunJsonOutput"
          title: Output
          description: Output from the task conforming to the output schema.
          discriminator:
            propertyName: type
            mapping:
              json: "#/components/schemas/TaskRunJsonOutput"
              text: "#/components/schemas/TaskRunTextOutput"
      type: object
      required:
        - run
        - output
      title: TaskRunResult
      description: Result of a task run.
    TaskRunTextOutput:
      properties:
        basis:
          items:
            $ref: "#/components/schemas/shapley__search__tasks__api_v1__FieldBasis"
          type: array
          title: Basis
          description: Basis for the output. The basis has a single field 'output'.
        mcp_tool_calls:
          anyOf:
            - items:
                $ref: "#/components/schemas/McpToolCall"
              type: array
            - type: "null"
          title: Mcp Tool Calls
          description: MCP tool calls made by the task.
        type:
          type: string
          enum:
            - text
          const: text
          title: Type
          description: The type of output being returned, as determined by the output schema of the task spec.
          default: text
        content:
          type: string
          title: Content
          description: Text output from the task.
      type: object
      required:
        - basis
        - content
      title: TaskRunTextOutput
      description: Output from a task that returns text.
    TaskSpec:
      properties:
        output_schema:
          anyOf:
            - $ref: "#/components/schemas/JsonSchema"
            - $ref: "#/components/schemas/TextSchema"
            - $ref: "#/components/schemas/AutoSchema"
            - type: string
          title: Output Schema
          description: >-
            JSON schema or text fully describing the desired output from the task. Descriptions of output
            fields will determine the form and content of the response. A bare string is equivalent to a text
            schema with the same description.
        input_schema:
          anyOf:
            - type: string
            - $ref: "#/components/schemas/JsonSchema"
            - $ref: "#/components/schemas/TextSchema"
            - type: "null"
          title: Input Schema
          description: >-
            Optional JSON schema or text description of expected input to the task. A bare string is
            equivalent to a text schema with the same description.
      type: object
      required:
        - output_schema
      title: TaskSpec
      description: |-
        Specification for a task.

        For convenience we allow bare strings as input or output schemas, which is
        equivalent to a text schema with the same description.

        NOTE: Ordering of args impacts docs so please be careful when
        changing the order.
    TextSchema:
      properties:
        description:
          type: string
          title: Description
          description: A text description of the desired output from the task.
          examples:
            - GDP in USD for the year, formatted like '$3.1 trillion (2023)'
        type:
          type: string
          enum:
            - text
          const: text
          title: Type
          description: The type of schema being defined. Always `text`.
          default: text
      type: object
      required:
        - description
      title: TextSchema
      description: Text description for a task input or output.
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    WebSearchResult:
      properties:
        url:
          type: string
          title: Url
          description: URL associated with the search result.
        title:
          type: string
          title: Title
          description: Title of the search result.
        excerpts:
          items:
            type: string
          type: array
          title: Excerpts
          description: Text excerpts from the search result which are relevant to the request.
      type: object
      required:
        - url
        - title
        - excerpts
      title: WebSearchResult
      description: A single search result from the web search API.
    shapley__search__tasks__api_v1__FieldBasis:
      properties:
        field:
          type: string
          title: Field
          description: Name of the output field.
        citations:
          items:
            $ref: "#/components/schemas/Citation"
          type: array
          title: Citations
          description: List of citations supporting the output field.
          default: []
        reasoning:
          type: string
          title: Reasoning
          description: Reasoning for the output field.
        confidence:
          anyOf:
            - type: string
            - type: "null"
          title: Confidence
          description: Confidence level for the output field. Only certain processors provide confidence levels.
          examples:
            - low
            - medium
            - high
      type: object
      required:
        - field
        - reasoning
      title: FieldBasis
      description: Citations and reasoning supporting one field of a task output.
    shapley__search__tasks__api_v1__Warning:
      properties:
        type:
          type: string
          title: Type
          description: Type of warning. Note that adding new warning types is considered a backward-compatible change.
          examples:
            - spec_validation_warning
            - input_validation_warning
        message:
          type: string
          title: Message
          description: Human-readable message.
        detail:
          anyOf:
            - type: object
            - type: "null"
          title: Detail
          description: Optional detail supporting the warning.
      type: object
      required:
        - type
        - message
      title: Warning
      description: Human-readable message for a task.
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
tags:
  - name: Task API v1
    description: |-
      The Parallel Task API enables state-of-the-art web research at scale, transforming natural language queries into precise, schema-compliant web outputs. State your research task in natural language and Parallel will handle the heavy lifting - generating input/output schemas, finding relevant URLs, and extracting data in structured formats.

      The Task API supports a progression from simple queries to complex structured outputs. You can start with simple text-to-text transformations and scale up to structured JSON outputs with defined schemas. Choose from five processors (Lite, Base, Core, Pro, Ultra) to optimize for your specific needs around price, latency, and quality.

      Every Task Run result includes comprehensive "basis" information - citations, reasoning, excerpts, and confidence levels that support each output field. This transparency enables you to understand how the system arrived at its conclusions and assess the reliability of the output. The API enforces a rate limit of 2,000 requests per minute and follows a pay-per-use pricing model based on processor selection.
  - name: Search API
    description: |-
      The Parallel Search API provides AI-native web search capabilities optimized for agents, RAG systems, and research automation. Built on Parallel's custom web crawler and index, it takes flexible natural language objectives and returns LLM-ready ranked URLs with extended webpage excerpts.

      Unlike traditional search engines, the Search API is designed specifically for AI workflows. You can provide natural language objectives (like "Find recent AI research papers") along with optional keyword queries, and receive ranked results with substantial text excerpts ready for further processing. The API supports source policy controls to include or exclude specific domains, making it ideal for compliance-conscious applications.

      Currently available in alpha with "base" and "pro" processors, the Search API offers different performance and result quality tiers. Rate limits are set at 1,000 requests per hour to ensure consistent performance across all users. This API is particularly valuable for building AI agents that need to gather and synthesize information from across the web.
  - name: Task API (Beta)
    description: |-
      The Task Group API enables efficient batch processing of hundreds or thousands of task runs with unified monitoring and intelligent failure handling. When your pipeline needs to process large volumes of independent Parallel Tasks, the Group API wraps operations into a single batch with real-time progress tracking and results streaming.

      Task Groups provide several key capabilities for large-scale operations: collective progress monitoring across all tasks in a group, real-time streaming of results as they become available, intelligent failure handling at the group level, and the ability to add new tasks dynamically to an existing group. These batch operations are ideal for bulk CRM enrichment, due diligence workflows, competitive intelligence gathering, or any scenario requiring processing of similar tasks at scale.

      The Group API supports server-sent events (SSE) for real-time updates, enabling you to monitor progress and collect results as they become available. This is particularly valuable for long-running batch jobs where you need visibility into completion status and want to process results immediately rather than waiting for the entire batch to finish.

      This API is currently in beta and subject to change. It's designed for production use cases requiring high-volume task processing with enterprise-grade monitoring and reliability features.
servers:
  - url: https://api.parallel.ai
    description: Parallel API
security:
  - ApiKeyAuth: []
